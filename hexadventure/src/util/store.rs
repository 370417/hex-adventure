//! Store values in a central owner that behaves like a HashMap with autogenerated keys.
//!
//! This is intended to avoid cycles in structs so that they can be serialized.

const INVALID_VERSION: u32 = 0;
const FIRST_VALID_VERSION: u32 = 1;

#[derive(Serialize, Deserialize)]
pub struct Store<T> {
    values: Vec<Versioned<T>>,
    reusable_ids: Vec<Id>,
}

#[derive(Copy, Clone, Serialize, Deserialize)]
pub struct Id {
    index: usize,
    version: u32,
}

#[derive(Serialize, Deserialize)]
struct Versioned<T> {
    value: T,
    version: u32,
}

impl<T> Store<T> {
    /// Creates an empty store.
    pub fn new() -> Self {
        Store {
            values: Vec::new(),
            reusable_ids: Vec::new(),
        }
    }

    /// Adds a value to the store.
    pub fn insert(&mut self, value: T) -> Id {
        if let Some(id) = self.reusable_ids.pop() {
            self.values[id.index] = Versioned {
                value,
                version: id.version,
            };
            id
        } else {
            let id = Id {
                index: self.values.len(),
                version: FIRST_VALID_VERSION,
            };
            self.values[id.index] = Versioned {
                value,
                version: id.version,
            };
            id
        }
    }

    /// Returns a reference to the value corresponding to the id.
    pub fn get(&self, id: Id) -> Option<&T> {
        match self.values.get(id.index) {
            Some(&Versioned { ref value, version }) if version == id.version => Some(value),
            _ => None,
        }
    }

    /// Returns a mutable reference to the value corresponding to the id.
    pub fn get_mut(&mut self, id: Id) -> Option<&mut T> {
        match self.values.get_mut(id.index) {
            Some(&mut Versioned {
                ref mut value,
                version,
            }) if version == id.version =>
            {
                Some(value)
            }
            _ => None,
        }
    }

    /// Removes a value from the store. Returns `true` if the value was present in the set.
    ///
    /// The values do not actually go out of scope right away.
    pub fn remove(&mut self, id: Id) -> bool {
        match self.values.get_mut(id.index) {
            Some(&mut Versioned {
                ref mut version, ..
            }) if *version == id.version =>
            {
                *version = INVALID_VERSION;
                self.reusable_ids.push(id.reuse());
                true
            }
            _ => false,
        }
    }

    /// Returns an iterator that iterates through every value.
    pub fn iter(&self) -> Iter<T> {
        Iter {
            values: &self.values,
            index: 0,
        }
    }
}

pub struct Iter<'a, T: 'a> {
    values: &'a Vec<Versioned<T>>,
    index: usize,
}

impl<'a, T> Iterator for Iter<'a, T> {
    type Item = &'a T;

    fn next(&mut self) -> Option<Self::Item> {
        loop {
            if self.index >= self.values.len() {
                break None;
            }
            let versioned = &self.values[self.index];
            if versioned.version > 0 {
                break Some(&versioned.value);
            }
            self.index += 1;
        }
    }
}

impl Id {
    fn reuse(self) -> Self {
        Id {
            index: self.index,
            version: self.version + 1,
        }
    }
}
